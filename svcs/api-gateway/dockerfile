# We want to build with the latest go version, so we use that. Because we want to boil this down to a scratch container,
# we use the "AS" directive to give the stage a name.
FROM golang:latest AS builder

# Install internet CA Certificates if they do not exist so we can copy them to the scratch container
# so that using secure endpoints actually functions in scratch
RUN apt-get install ca-certificates

# Create a user that we will run the service with
RUN useradd -MU gateway

# Set the working directory
WORKDIR /go/src/github.com/j4ng5y/hnsecrets

# Copy the files over
COPY . .

# "CGO_ENABLED=0" means that we do NOT want to use the C backed go compiler, we want the Go native compiler
#     note: This changes a few things, such as limiting some functions and whatnot, but makes for a much
#           smaller binary.
#
# "go build" is pretty seft explanitory
#
# "-a" means to compile all dependencies
#
# "-o /go/bin/gatewat" means that we are outputing our executable with the name of "gateway" and the path of
# /go/bin/...
#
# "-ldflags '-extldflags "-static"'" lets the Go linker know that we really, really want a static binary,
# which means that there are NO external C library dependencies to run our app
#
# "cmd/gateway/gateway.go" is simply the path to the main app entrypoint file
#
# All of this build the executable so that we can copy/use it in the scratch container
RUN CGO_ENABLED=0 go build -a -o /go/bin/gateway -ldflags '-extldflags "-static"' cmd/gateway/gateway.go

# scratch is a "distroless" container, meaning it's essentially just a linux kernel, therefore, very, very small
FROM scratch

# Copy all of the files we need, including our binary
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group
COPY --from=builder --chown=gateway:gateway /go/bin/gateway /gateway

# Set the user to run the app
USER gateway

# Run the app
ENTRYPOINT [ "/gateway" ]